create_event: ['Create a new calendar event', '', 'Args:', '    title (str): Event title', '    start_time (str): Start time in ISO format (2024-01-15T10:00:00)', '    end_time (str): End time in ISO format', '    description (str): Event description', '    location (str): Event location', '    attendees (List[str]): List of attendee email addresses', '    reminder_minutes (List[int]): Minutes before event to remind (e.g., [15, 60])', '    recurring (str): Recurring pattern ("daily", "weekly", "monthly", "yearly")', '    category (str): Event category', '', 'Returns:', '    Dict: Event creation result']
delete_event: ['Delete an event', '', 'Args:', '    event_id (str): Event ID to delete', '', 'Returns:', '    Dict: Delete result']
get_events: ['Get calendar events with optional filtering', '', 'Args:', '    start_date (str): Start date filter (YYYY-MM-DD)', '    end_date (str): End date filter (YYYY-MM-DD)', '    category (str): Category filter', '    search (str): Search term for title/description', '', 'Returns:', '    Dict: Events list and metadata']
get_upcoming_events: ['Get events coming up in the next N hours', '', 'Args:', '    hours (int): Number of hours to look ahead', '', 'Returns:', '    Dict: Upcoming events']
update_event: ['Update an existing event', '', 'Args:', '    event_id (str): Event ID to update', '    **updates: Fields to update (title, description, start_time, etc.)', '', 'Returns:', '    Dict: Update result']
clear_clipboard_history: ['Clear clipboard history', '', 'Returns:', '    Dict: Operation result']
copy_text_from_screen: ['Simulate Ctrl+C to copy selected text', '', 'Returns:', '    Dict: Operation result']
get_clipboard_content: ['Get current clipboard content', '', 'Returns:', '    Dict: Clipboard content and metadata']
get_clipboard_history: ['Get clipboard history', '', 'Args:', '    limit (int): Maximum number of items to return', '', 'Returns:', '    Dict: Clipboard history']
paste_text_to_screen: ['Simulate Ctrl+V to paste clipboard content', '', 'Returns:', '    Dict: Operation result']
restore_clipboard_item: ['Restore a clipboard item from history', '', 'Args:', '    index (int): Index of item in history (0 = most recent)', '', 'Returns:', '    Dict: Operation result']
set_clipboard_content: ['Set clipboard content', '', 'Args:', '    content (str): Content to set in clipboard', '', 'Returns:', '    Dict: Operation result']
type_text: ['Type text character by character', '', 'Args:', '    text (str): Text to type', '    delay (float): Delay between keystrokes in seconds', '', 'Returns:', '    Dict: Operation result']
copy_file_or_folder: ['Copy a file or folder to a new location', '', 'Args:', '    source (str): Source path', '    destination (str): Destination path', '    overwrite (bool): Overwrite if destination exists', '', 'Returns:', '    Dict: Operation result with success status']
create_folder: ['Create a new folder', '', 'Args:', '    path (str): Path where to create the folder', "    parents (bool): Create parent directories if they don't exist", '', 'Returns:', '    Dict: Operation result with success status']
delete_file_or_folder: ['Delete a file or folder', '', 'Args:', '    path (str): Path to delete', '    force (bool): Force delete even if read-only or non-empty', '', 'Returns:', '    Dict: Operation result with success status']
find_files: ['Search for files matching a pattern', '', 'Args:', '    search_term (str): Search pattern (supports wildcards)', '    location (str): Directory to search in (defaults to user home)', "    file_type (str): Filter by file extension (e.g., '.txt', '.py')", '    max_results (int): Maximum number of results to return', '', 'Returns:', '    Dict: Search results with file information']
get_file_info: ['Get detailed information about a file or folder', '', 'Args:', '    path (str): Path to examine', '', 'Returns:', '    Dict: Detailed file/folder information']
list_directory: ['List contents of a directory', '', 'Args:', '    path (str): Directory path (defaults to current directory)', '    show_hidden (bool): Include hidden files/folders', "    sort_by (str): Sort by 'name', 'size', 'modified', or 'type'", '', 'Returns:', '    Dict: Directory listing with file information']
move_file_or_folder: ['Move a file or folder to a new location', '', 'Args:', '    source (str): Source path', '    destination (str): Destination path', '    overwrite (bool): Overwrite if destination exists', '', 'Returns:', '    Dict: Operation result with success status']
open_folder: ['Open a folder in File Explorer (Windows), Finder (macOS), or default file manager (Linux).', "If no path is provided, opens the user's home directory.", '', 'Args:', '    path (str): Path to the folder to open. Defaults to user home directory.', '', 'Returns:', '    str: Success or error message']
get_time: ['Returns the current system time as a string. No input. Output is always the current time, and never fails.']
capture_webcam_photo: ['Capture a photo of the user.', 'Capture a photo from the physical webcam.', '', 'Args:', '    save_path (str): Path to save photo (auto-generated if None)', '    camera_index (int): Camera index (0 for default camera)', '', 'Returns:', '    Dict: Capture result']
control_media: ['Control media playback (play, pause, stop, next, previous)', '', 'Args:', "    action (str): Control action ('play', 'pause', 'stop', 'next', 'previous', 'volume_up', 'volume_down', 'mute')", '    application (str): Specific application to control (optional)', '', 'Returns:', '    Dict: Control result']
get_media_info: ['Get information about a media file', '', 'Args:', '    file_path (str): Path to media file', '', 'Returns:', '    Dict: Media file information']
play_media_file: ['Play a media file using default system player', '', 'Args:', '    file_path (str): Path to media file', '    fullscreen (bool): Whether to play in fullscreen', '    volume (int): Volume level (0-100)', '', 'Returns:', '    Dict: Playback result']
record_screen: ['Record screen for a specified duration', '', 'Args:', '    duration (int): Recording duration in seconds', '    save_path (str): Path to save recording (auto-generated if None)', '    region (tuple): Region to record (left, top, width, height)', '    fps (int): Frames per second', '    include_audio (bool): Whether to include audio', '', 'Returns:', '    Dict: Recording result with file path and metadata']
take_screenshot: ['Take a screenshot of the screen', '', 'Args:', '    save_path (str): Path to save screenshot (auto-generated if None)', '    region (tuple): Region to capture (left, top, width, height)', '    include_cursor (bool): Whether to include mouse cursor', '    format (str): Image format (PNG, JPEG, BMP)', '', 'Returns:', '    Dict: Screenshot result with file path and metadata']
connect_to_wifi: ['Connect to a WiFi network', '', 'Args:', '    ssid (str): Network SSID', '    password (str): Network password (if required)', '', 'Returns:', '    Dict: Connection result']
disconnect_wifi: ['Disconnect from current WiFi network', '', 'Returns:', '    Dict: Operation result']
get_network_status: ['Get comprehensive network status information', '', 'Returns:', '    Dict: Network status and information']
get_network_usage: ['Get network usage statistics', '', 'Returns:', '    Dict: Network usage information']
get_wifi_networks: ['Get available WiFi networks', '', 'Returns:', '    Dict: Available WiFi networks']
ping_host: ['Ping a host to test connectivity', '', 'Args:', '    hostname (str): Hostname or IP address to ping', '    count (int): Number of ping packets to send', '    timeout (int): Timeout in seconds', '', 'Returns:', '    Dict: Ping results']
send_notification: ['Send a Windows notification', '', 'Args:', '    title (str): Notification title', '    message (str): Notification message', '    duration (int): Duration in seconds', '', 'Returns:', '    Dict: Operation result']
test_internet_speed: ['Test internet connection speed (basic test)', '', 'Returns:', '    Dict: Speed test results']
open_browser_and_search: ['Open a site in the default web browser. ', '    Input is the URL to be searched. Output is the opened site']
close_application: ['Close an application gracefully or forcefully', '', 'Args:', '    app_name (str): Application name or PID', '    force (bool): Force close if graceful close fails', '', 'Returns:', '    Dict: Operation result with success status']
get_process_info: ['Get detailed information about a specific process', '', 'Args:', '    process_identifier (str): Process name or PID', '', 'Returns:', '    Dict: Detailed process information']
get_system_resources: ['Get current system resource usage', '', 'Returns:', '    Dict: System resource information']
launch_application: ['Launch an application', '', 'Args:', '    app_path (str): Path to executable or application name', '    arguments (List[str]): Command line arguments', '    working_dir (str): Working directory for the application', '', 'Returns:', '    Dict: Launch result with process information']
list_running_apps: ['List all running applications', '', 'Args:', '    include_system (bool): Include system processes', "    sort_by (str): Sort by 'name', 'cpu', 'memory', or 'pid'", '', 'Returns:', '    Dict: List of running applications with details']
set_process_priority: ['Set the priority of a process', '', 'Args:', '    process_identifier (str): Process name or PID', "    priority (str): Priority level ('low', 'below_normal', 'normal', 'above_normal', 'high')", '', 'Returns:', '    Dict: Operation result with success status']
run_python: ['Execute Python code and return the output or error. Input is the code to execute. Output is the result or error message.']
search_wikipedia: ['Search Wikipedia for a query and return a summary. ', '    The query must be as unambiguous as possible (specify category)']
cancel_shutdown: ['Cancel a scheduled shutdown or restart', '', 'Returns:', '    Dict: Operation result']
get_system_info: ['Get basic system information', '', 'Returns:', '    Dict: System information']
get_volume_level: ['Get the current system volume level.']
lock_screen: ['Lock the screen', '', 'Returns:', '    Dict: Operation result']
mute_unmute_volume_audio: ['Mute or unmute the system', '', 'Args:', '    mute (bool): True to mute, False to unmute', '', 'Returns:', '    Dict: Operation result']
restart_system: ['Restart the system', '', 'Args:', '    delay (int): Delay in seconds before restart', '    message (str): Optional restart message', '', 'Returns:', '    Dict: Operation result']
run_command_as_admin: ['Run a command with administrator privileges', '', 'Args:', '    command (str): Command to run', '', 'Returns:', '    Dict: Operation result']
set_volume_level: ['Set the system volume level', '', 'Args:', '    level (int): Volume level (0-100)', '', 'Returns:', '    Dict: Operation result']
shutdown_system: ['Shutdown the system', '', 'Args:', '    delay (int): Delay in seconds before shutdown', '    message (str): Optional shutdown message', '', 'Returns:', '    Dict: Operation result']
sleep_system: ['Put the system to sleep', '', 'Returns:', '    Dict: Operation result']
extract_text_from_image: ['Extract text from an image using OCR', '', 'Args:', '    image_path (str): Path to image file', '    language (str): OCR language code', '', 'Returns:', '    Dict: Extracted text and metadata']
read_text_from_file: ['Read text content from a file', '', 'Args:', '    file_path (str): Path to the text file', '    encoding (str): Text encoding (auto-detect if None)', '    max_size_mb (int): Maximum file size in MB to read', '', 'Returns:', '    Dict: File content and metadata']
search_in_file: ['Search for text in a file', '', 'Args:', '    file_path (str): Path to search in', '    search_term (str): Text or regex pattern to search for', '    case_sensitive (bool): Whether search is case sensitive', '    use_regex (bool): Whether to treat search_term as regex', '    max_matches (int): Maximum number of matches to return', '', 'Returns:', '    Dict: Search results']
translate_text: ['Translate text to another language', '', 'Args:', '    text (str): Text to translate', '    target_language (str): Target language code', "    source_language (str): Source language code ('auto' for detection)", '', 'Returns:', '    Dict: Translation result']
write_text_to_file: ['Write text content to a file', '', 'Args:', '    file_path (str): Path to write the file', '    content (str): Text content to write', '    encoding (str): Text encoding', "    mode (str): Write mode ('w' for overwrite, 'a' for append)", "    create_dirs (bool): Create parent directories if they don't exist", '', 'Returns:', '    Dict: Operation result']
arrange_windows: ['Arrange windows using Windows built-in arrangements', '', 'Args:', "    arrangement (str): Arrangement type ('cascade', 'tile_horizontal', 'tile_vertical', 'minimize_all')", '', 'Returns:', '    Dict: Operation result']
close_window: ['Close a window (sends WM_CLOSE message)', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Operation result']
find_window: ['Find a window by title or process name', '', 'Args:', '    window_identifier (str): Window title or process name to search for', '', 'Returns:', '    Dict: Window information or error']
focus_window: ['Bring a window to the foreground and focus it', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Operation result']
get_window_info: ['Get detailed information about a specific window', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Detailed window information']
list_windows: ['List all windows', '', 'Args:', '    visible_only (bool): Only include visible windows', "    sort_by (str): Sort by 'title', 'process', or 'size'", '', 'Returns:', '    Dict: List of windows with details']
maximize_window: ['Maximize a window', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Operation result']
minimize_window: ['Minimize a window', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Operation result']
move_window: ['Move a window to a specific position', '', 'Args:', '    window_identifier (str): Window title or process name', '    x (int): New x position in pixels', '    y (int): New y position in pixels', '', 'Returns:', '    Dict: Operation result']
resize_window: ['Resize a window to specific dimensions', '', 'Args:', '    window_identifier (str): Window title or process name', '    width (int): New width in pixels', '    height (int): New height in pixels', '', 'Returns:', '    Dict: Operation result']
restore_window: ['Restore a window to its normal size', '', 'Args:', '    window_identifier (str): Window title or process name', '', 'Returns:', '    Dict: Operation result']